/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Forms;

import Forms.HomePages.DoctorHomePage;
import Objects.Appointment;
import Objects.Medicine;
import Objects.PrescribedMedicine;
import Objects.Prescription;
import Panels.ContainedComponents.PrescriptionPanel;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import patientmanagementsystem.PatientManagementSystem;

/**
 *
 * @author espow
 */
public class AppointmentPage extends javax.swing.JFrame {
    private final Appointment APPOINTMENT;
    private final DoctorHomePage DHP;
    /**
     * Creates new form AppointmentPage
     * @param APPOINTMENT
     * @param DHP
     */
    public AppointmentPage(Appointment APPOINTMENT,DoctorHomePage DHP) {
        this.APPOINTMENT = APPOINTMENT;
        this.DHP = DHP;
        initComponents();
        loadPatientInfo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        LblPatientID = new javax.swing.JLabel();
        LblPatientName = new javax.swing.JLabel();
        LblPatientAge = new javax.swing.JLabel();
        LblPatientGender = new javax.swing.JLabel();
        LblNotes = new javax.swing.JLabel();
        SclNotes = new javax.swing.JScrollPane();
        TxtNotes = new javax.swing.JTextArea();
        LblMedicines = new javax.swing.JScrollPane();
        TblMedicines = new javax.swing.JTable();
        BtnCancel = new javax.swing.JButton();
        BtnAddMedicine = new javax.swing.JButton();
        BtnCompleteAppointment = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Ongoing Appointment");
        setResizable(false);

        LblPatientID.setFont(PatientManagementSystem.getTextFont());
        LblPatientID.setText("Patient ID:");

        LblPatientName.setFont(PatientManagementSystem.getTextFont());
        LblPatientName.setText("Patient Name:");

        LblPatientAge.setFont(PatientManagementSystem.getTextFont());
        LblPatientAge.setText("Age:");

        LblPatientGender.setFont(PatientManagementSystem.getTextFont());
        LblPatientGender.setText("Gender:");

        LblNotes.setFont(PatientManagementSystem.getTextFont());
        LblNotes.setText("Notes:");

        SclNotes.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        SclNotes.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        TxtNotes.setColumns(20);
        TxtNotes.setFont(PatientManagementSystem.getTextFont());
        TxtNotes.setLineWrap(true);
        TxtNotes.setRows(5);
        TxtNotes.setWrapStyleWord(true);
        SclNotes.setViewportView(TxtNotes);

        LblMedicines.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        LblMedicines.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        LblMedicines.setMaximumSize(new java.awt.Dimension(640, 100));
        LblMedicines.setMinimumSize(new java.awt.Dimension(640, 100));
        LblMedicines.setPreferredSize(new java.awt.Dimension(640, 100));

        TblMedicines.setFont(PatientManagementSystem.getTextFont());
        TblMedicines.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Medicine Name", "Quantity", "Doseage"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        TblMedicines.getTableHeader().setReorderingAllowed(false);
        LblMedicines.setViewportView(TblMedicines);

        BtnCancel.setFont(PatientManagementSystem.getTextFont());
        BtnCancel.setText("Cancel");
        BtnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCancelActionPerformed(evt);
            }
        });

        BtnAddMedicine.setFont(PatientManagementSystem.getTextFont());
        BtnAddMedicine.setText("Add Medicine to prescription");
        BtnAddMedicine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnAddMedicineActionPerformed(evt);
            }
        });

        BtnCompleteAppointment.setFont(PatientManagementSystem.getTextFont());
        BtnCompleteAppointment.setText("Complete Appointment");
        BtnCompleteAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCompleteAppointmentActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(SclNotes)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(LblPatientID)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(LblPatientName)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(LblPatientAge)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(LblPatientGender))
                                    .addComponent(LblNotes))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(LblMedicines, javax.swing.GroupLayout.PREFERRED_SIZE, 645, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(BtnCancel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(79, 79, 79)
                        .addComponent(BtnAddMedicine, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(74, 74, 74)
                        .addComponent(BtnCompleteAppointment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(14, 14, 14))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LblPatientID)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LblPatientName)
                    .addComponent(LblPatientAge)
                    .addComponent(LblPatientGender))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(LblNotes)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SclNotes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LblMedicines, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BtnCancel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BtnAddMedicine, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BtnCompleteAppointment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnCompleteAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnCompleteAppointmentActionPerformed
        for(Appointment appointment : PatientManagementSystem.getAppointments()){
            if(appointment.equals(APPOINTMENT)){
                appointment.setDoctorNotes(this.TxtNotes.getText());
                appointment.setStatus("Completed");
                DefaultTableModel model = (DefaultTableModel) this.TblMedicines.getModel();
                boolean allMedicinesFound = true;
                if(model.getRowCount()>0){
                    ArrayList<PrescribedMedicine> pm = new ArrayList();
                    for(int i = 0;i < model.getRowCount();i++){
                        
                        String medicineName = (String) model.getValueAt(i,0);
                        int quantity = (int) model.getValueAt(i,1);
                        String dosage = (String) model.getValueAt(i,2);
                        boolean found = false;
                        for(Medicine medicine : PatientManagementSystem.getMedicines()){
                            
                            if(medicine.getMedicineName().equalsIgnoreCase(medicineName)){
                                if(medicine.getStock()< quantity)medicine.setRequestedOrdered(medicine.getRequestedOrdered()+quantity);
                                pm.add(new PrescribedMedicine(medicine,quantity,dosage));
                                found = true;
                                break;
                            }
                        }
                        if(!found){
                            allMedicinesFound = false;
                            JOptionPane.showMessageDialog(null, "The medicine "+medicineName+"\ncould not be found");
                            break;
                            
                        }
                    }
                    if(allMedicinesFound)appointment.setPrescription(new Prescription(appointment.getDoctor(),
                                                                        appointment.getPatient(),
                                                                        pm,appointment.getDoctorNotes()));
                }
                if(allMedicinesFound){
                PatientManagementSystem.saveInformation(PatientManagementSystem.getFile());
                DHP.updateAll();
                this.dispose();
                }
            }
        }
    }//GEN-LAST:event_BtnCompleteAppointmentActionPerformed

    private void BtnAddMedicineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnAddMedicineActionPerformed
        DefaultTableModel dTM = (DefaultTableModel) this.TblMedicines.getModel();
        dTM.addRow(new Object[]{"",0,""});
        this.TblMedicines.setModel(dTM);
    }//GEN-LAST:event_BtnAddMedicineActionPerformed

    private void BtnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_BtnCancelActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnAddMedicine;
    private javax.swing.JButton BtnCancel;
    private javax.swing.JButton BtnCompleteAppointment;
    private javax.swing.JScrollPane LblMedicines;
    private javax.swing.JLabel LblNotes;
    private javax.swing.JLabel LblPatientAge;
    private javax.swing.JLabel LblPatientGender;
    private javax.swing.JLabel LblPatientID;
    private javax.swing.JLabel LblPatientName;
    private javax.swing.JScrollPane SclNotes;
    private javax.swing.JTable TblMedicines;
    private javax.swing.JTextArea TxtNotes;
    // End of variables declaration//GEN-END:variables

    private void loadPatientInfo() {
        LblPatientID.setText("Patient ID: "+this.APPOINTMENT.getPatient().getUniqueID());
        LblPatientName.setText("Name: "+this.APPOINTMENT.getPatient().getFirstName()+" "+this.APPOINTMENT.getPatient().getLastName());
        LblPatientAge.setText("Age: "+this.APPOINTMENT.getPatient().getAge());
        LblPatientGender.setText("Gender: "+this.APPOINTMENT.getPatient().getGender());
    }
}
