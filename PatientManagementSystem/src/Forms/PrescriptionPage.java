/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Forms;

import Forms.HomePages.SecretaryHomePage;
import Objects.Medicine;
import Objects.PrescribedMedicine;
import Objects.Prescription;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import patientmanagementsystem.PatientManagementSystem;
import patientmanagementsystem.UserTypes.Patient;
import patientmanagementsystem.UserTypes.User;

/**
 *
 * @author espow
 */
public class PrescriptionPage extends javax.swing.JFrame {
    SecretaryHomePage shp;
    ArrayList<PrescribedMedicine> patientsMeds = new ArrayList<>();
    Patient selectedPatient;
    
    public PrescriptionPage(SecretaryHomePage shp) {
        this.shp = shp;
        initComponents();
        setLocationRelativeTo(null);
        for(User user : Patient.getPatients(PatientManagementSystem.getUsers()))
        {
            CbxPatient.addItem(user.getUniqueID());
        }
        updateSelected();
        updatePrescribedMedicines(PatientManagementSystem.getPrescriptions(),selectedPatient);
        updateTable(patientsMeds);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        LblPatient = new javax.swing.JLabel();
        CbxPatient = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        TblPrescribedMedicines = new javax.swing.JTable();
        BtnCancel = new javax.swing.JButton();
        BtnGivePrescription = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Prescription Giver");
        setMaximumSize(new java.awt.Dimension(600, 350));
        setMinimumSize(new java.awt.Dimension(600, 350));
        setPreferredSize(new java.awt.Dimension(600, 350));
        setResizable(false);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        LblPatient.setFont(PatientManagementSystem.getTextFont());
        LblPatient.setText("Patient:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(15, 15, 10, 10);
        getContentPane().add(LblPatient, gridBagConstraints);

        CbxPatient.setFont(PatientManagementSystem.getTextFont());
        CbxPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CbxPatientActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(15, 10, 10, 15);
        getContentPane().add(CbxPatient, gridBagConstraints);

        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setMaximumSize(new java.awt.Dimension(580, 200));
        jScrollPane1.setMinimumSize(new java.awt.Dimension(580, 200));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(580, 200));

        TblPrescribedMedicines.setFont(PatientManagementSystem.getTextFont());
        TblPrescribedMedicines.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Medicine Name", "Quantity", "Dosage", "Given"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TblPrescribedMedicines.setMaximumSize(new java.awt.Dimension(580, 1000));
        TblPrescribedMedicines.setMinimumSize(new java.awt.Dimension(580, 200));
        TblPrescribedMedicines.setPreferredSize(new java.awt.Dimension(580, 200));
        jScrollPane1.setViewportView(TblPrescribedMedicines);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        getContentPane().add(jScrollPane1, gridBagConstraints);

        BtnCancel.setFont(PatientManagementSystem.getTextFont());
        BtnCancel.setText("Cancel");
        BtnCancel.setToolTipText("");
        BtnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCancelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 15, 15, 10);
        getContentPane().add(BtnCancel, gridBagConstraints);

        BtnGivePrescription.setFont(PatientManagementSystem.getTextFont());
        BtnGivePrescription.setText("Give Prescription");
        BtnGivePrescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnGivePrescriptionActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 15, 15);
        getContentPane().add(BtnGivePrescription, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CbxPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CbxPatientActionPerformed
        updateSelected();
        updatePrescribedMedicines(PatientManagementSystem.getPrescriptions(),this.selectedPatient);
        updateTable(patientsMeds);
    }//GEN-LAST:event_CbxPatientActionPerformed

    private void BtnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_BtnCancelActionPerformed

    private void BtnGivePrescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnGivePrescriptionActionPerformed
        DefaultTableModel model = (DefaultTableModel) TblPrescribedMedicines.getModel();
        ArrayList<ReducedStock> medicineReduction = new ArrayList<ReducedStock>();
        for(int i = 0;i<model.getRowCount();i++){
            if((Boolean) model.getValueAt(i, 3)){
                if(!medicineReduction.isEmpty()){
                    boolean found = false;
                    for(ReducedStock reduced : medicineReduction){
                        if(reduced.getMedName().equals(model.getValueAt(i, 0).toString())){
                            reduced.addToQuantity((int) model.getValueAt(i, 1));
                            found = true;
                        }
                    }
                    if(!found) medicineReduction.add(new ReducedStock(model.getValueAt(i, 0).toString(),(int) model.getValueAt(i, 1)));
                } else medicineReduction.add(new ReducedStock(model.getValueAt(i, 0).toString(),(int) model.getValueAt(i, 1)));
            }
        }
        if(isInStock(medicineReduction)){
            for(Medicine med : PatientManagementSystem.getMedicines()){
                for(ReducedStock reduced : medicineReduction){
                    if(med.getMedicineName().equals(reduced.medicineName))med.setStock(med.getStock()-reduced.quantity);  
                }
            }
            PatientManagementSystem.saveInformation(PatientManagementSystem.getFile());
            shp.updateAll();
            this.dispose();
        } else JOptionPane.showMessageDialog(null,
                            "There is not enough Stock for this",
                            "Short on Stock",
                            JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_BtnGivePrescriptionActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnCancel;
    private javax.swing.JButton BtnGivePrescription;
    private javax.swing.JComboBox<String> CbxPatient;
    private javax.swing.JLabel LblPatient;
    private javax.swing.JTable TblPrescribedMedicines;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private void updateSelected() {
        if(CbxPatient.getSelectedItem() != null){
            this.selectedPatient = (Patient) User.getUser(PatientManagementSystem.getUsers(), CbxPatient.getSelectedItem().toString());
        }    
    }

    private void updatePrescribedMedicines(ArrayList<Prescription> prescriptions,Patient patient) {
        if(!patientsMeds.isEmpty())patientsMeds.clear();
        for(Prescription prescription : prescriptions){
            if(prescription.getIssueTo().equals(patient)){
                patientsMeds.addAll(prescription.getPrescribedMedicine());
            }
        }
    }

    private void updateTable(ArrayList<PrescribedMedicine> patientsMeds) {
        TblPrescribedMedicines.removeAll();
        DefaultTableModel model = (DefaultTableModel) TblPrescribedMedicines.getModel();
        Object[] rowData = new Object[4];
        for(PrescribedMedicine patientMed : patientsMeds){
            rowData[0] = patientMed.getMedicine().getMedicineName();
            rowData[1] = patientMed.getQuantity();
            rowData[2] = patientMed.getDosage();
            rowData[3] = false;
            model.addRow(rowData);
        }
        TblPrescribedMedicines.getColumnModel().getColumn(1).setPreferredWidth(20);
        TblPrescribedMedicines.getColumnModel().getColumn(3).setPreferredWidth(20);
    }

    private boolean isInStock(ArrayList<ReducedStock> medicineReduction) {
        boolean inStock = true;
        for(Medicine med : PatientManagementSystem.getMedicines()){
            for(ReducedStock reduced : medicineReduction){
                if(med.getMedicineName().equals(reduced.medicineName)){
                    if(med.getStock()<reduced.quantity) inStock = false;
                }
            }
        }
        return inStock;
    }
}

class ReducedStock{
    String medicineName;
    int quantity;
     protected ReducedStock(String medName,int quantity){
         this.medicineName = medName;
         this.quantity = quantity;
     }
     
     protected String getMedName(){
         return this.medicineName;
     }
     
     protected void addToQuantity(int added){
         this.quantity = this.quantity+added;
     }
}
