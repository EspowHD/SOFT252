/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Forms.Makers;
import Forms.HomePages.SecretaryHomePage;
import Objects.Appointment;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import patientmanagementsystem.PatientManagementSystem;
import patientmanagementsystem.UserTypes.*;
public class SecretaryAppointmentMakerPage extends javax.swing.JFrame {
    SecretaryHomePage shp;
    Patient selectedPatient;
    public SecretaryAppointmentMakerPage(SecretaryHomePage shp) {
        this.shp = shp;
        initComponents();
        loadCombo();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlAppointmentMaker1 = new Panels.PnlAppointmentMaker();
        LblPatient = new javax.swing.JLabel();
        CbxPatient = new javax.swing.JComboBox<>();
        BtnCancel = new javax.swing.JButton();
        BtnMakeAppointment = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        LblPatient.setFont(PatientManagementSystem.getTextFont());
        LblPatient.setText("Patient:");

        CbxPatient.setFont(PatientManagementSystem.getTextFont());
        CbxPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CbxPatientActionPerformed(evt);
            }
        });

        BtnCancel.setFont(PatientManagementSystem.getTextFont());
        BtnCancel.setText("Cancel");
        BtnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCancelActionPerformed(evt);
            }
        });

        BtnMakeAppointment.setFont(PatientManagementSystem.getTextFont());
        BtnMakeAppointment.setText("Make Appointment");
        BtnMakeAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnMakeAppointmentActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(pnlAppointmentMaker1, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(LblPatient)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CbxPatient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(99, 99, 99)
                .addComponent(BtnCancel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(BtnMakeAppointment)
                .addGap(99, 99, 99))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LblPatient)
                    .addComponent(CbxPatient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlAppointmentMaker1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BtnMakeAppointment)
                    .addComponent(BtnCancel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_BtnCancelActionPerformed

    private void BtnMakeAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnMakeAppointmentActionPerformed
        try{
            Doctor doctor = null;
            for (int i = 0; i < PatientManagementSystem.getUsers().size(); i++) {
                User user = PatientManagementSystem.getUsers().get(i);
                if(user.getUniqueID().contains("D")){
                if(this.pnlAppointmentMaker1.CoBoDoctorSelector.getSelectedItem().toString().contains(PatientManagementSystem.getUsers().get(i).getFirstName()) &&
                    this.pnlAppointmentMaker1.CoBoDoctorSelector.getSelectedItem().toString().contains(PatientManagementSystem.getUsers().get(i).getLastName())){
                    doctor = (Doctor) user;
                }
            }
            }
            if(!checkIfBusy(this.selectedPatient,doctor,this.pnlAppointmentMaker1.getDate())){
                ArrayList<Appointment> appointments = PatientManagementSystem.getAppointments();
                appointments.add(new Appointment(this.selectedPatient,doctor,"Approved",this.pnlAppointmentMaker1.getDate()));
                PatientManagementSystem.setAppointments(appointments);
                if(this.shp != null)this.shp.updateAppointmentsList(shp.getSelectedDoctor().getAppointments());
                PatientManagementSystem.saveInformation(PatientManagementSystem.getFile());
                dispose();
            }
            else{
                JOptionPane.showMessageDialog(null, "The doctor or patient is busy\nat this time");
            }
        } catch (Exception e){
        }
    }//GEN-LAST:event_BtnMakeAppointmentActionPerformed

    private void CbxPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CbxPatientActionPerformed
        updateSelected();
    }//GEN-LAST:event_CbxPatientActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnCancel;
    private javax.swing.JButton BtnMakeAppointment;
    private javax.swing.JComboBox<String> CbxPatient;
    private javax.swing.JLabel LblPatient;
    private Panels.PnlAppointmentMaker pnlAppointmentMaker1;
    // End of variables declaration//GEN-END:variables

    private void loadCombo() {
        this.CbxPatient.removeAll();
        for(User user : PatientManagementSystem.getUsers()){
            if(user.getUniqueID().contains(("P"))){
                Patient patient = (Patient) user;
                this.CbxPatient.addItem(patient.displayUser());
            }
        }
        updateSelected();
    }
    
    private boolean checkIfBusy(Patient patient, Doctor doctor, Date date) {
        boolean busy = false;
        for (Appointment appointment : PatientManagementSystem.getAppointments()) {
            if (appointment.getDoctor() == doctor || appointment.getPatient() == patient){
                if(appointment.getDateTime().equals(date)) busy = true;
            }
        }
        return busy;
    }

    private void updateSelected() {
        for(User user : PatientManagementSystem.getUsers()){
            if(this.CbxPatient.getSelectedItem().toString().contains(user.getFirstName()+" "+user.getLastName())) this.selectedPatient = (Patient) user;
        }
    }
}
